// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum EventMatchType {
  SOLOS
  SOLOSvDUOS
  SOLOSvTRIOS
  DUOS
  DUOSvTRIOS
  TRIOS
}

model Event {
  id          String         @id @default(uuid())
  createdDate DateTime       @default(now())
  updatedDate DateTime       @default(now())
  name        String
  startDate   DateTime
  picture     String?
  isActive    Boolean        @default(false)
  match_type  EventMatchType
  teams       Team[]
  scores      EventScore[]
}

enum UserType {
  USER
  ADMIN
}

model User {
  id             String        @id
  createdDate    DateTime      @default(now())
  updatedDate    DateTime      @default(now())
  user_type      UserType      @default(USER)
  nickname       String?
  name           String?
  picture        String?
  email          String?
  email_verified Boolean?
  sub            String?
  profile        UserProfile?
  player_scores  PlayerScore[]
  member_of_team TeamMember[]

  @@index([email, sub])
}

model UserProfile {
  id           String   @id @default(uuid())
  createdDate  DateTime @default(now())
  updatedDate  DateTime @default(now())
  steam_name   String?
  twitch_name  String?
  discord_name String?
  twitter_name String?
  about_me     String?
  user         User     @relation(fields: [user_id], references: [id])
  user_id      String   @unique

  @@index([user_id])
}

model Team {
  id           String       @id @default(uuid())
  createdDate  DateTime     @default(now())
  updatedDate  DateTime     @default(now())
  name         String
  event        Event        @relation(fields: [event_id], references: [id])
  event_id     String
  team_members TeamMember[]
  EventScore   EventScore[]

  @@index([event_id])
}

enum TeamMemberType {
  CAPTAIN
  MEMBER
  SCOREKEEPER
}

model TeamMember {
  team_id     String
  user_id     String
  createdDate DateTime       @default(now())
  updatedDate DateTime       @default(now())
  member_type TeamMemberType @default(CAPTAIN)
  team        Team           @relation(fields: [team_id], references: [id])
  user        User           @relation(fields: [user_id], references: [id])

  @@id([team_id, user_id])
  @@index([team_id, user_id, member_type])
}

model EventScore {
  event_id      String
  team_id       String
  round_num     Int
  createdDate   DateTime      @default(now())
  updatedDate   DateTime      @default(now())
  event         Event         @relation(fields: [event_id], references: [id])
  team          Team          @relation(fields: [team_id], references: [id])
  team_score    TeamScore?
  player_scores PlayerScore[]

  @@id([event_id, team_id, round_num])
  @@index([event_id, team_id])
}

model TeamScore {
  event_id    String
  team_id     String
  round_num   Int
  createdDate DateTime   @default(now())
  updatedDate DateTime   @default(now())
  bounties    Int
  event_score EventScore @relation(fields: [event_id, team_id, round_num], references: [event_id, team_id, round_num])

  @@id([event_id, team_id, round_num])
  @@index([event_id, team_id])
}

model PlayerScore {
  event_id    String
  team_id     String
  round_num   Int
  user_id     String
  createdDate DateTime   @default(now())
  updatedDate DateTime   @default(now())
  kills       Int
  event_score EventScore @relation(fields: [event_id, team_id, round_num], references: [event_id, team_id, round_num])
  user        User       @relation(fields: [user_id], references: [id])

  @@id([event_id, team_id, round_num, user_id])
  @@index([event_id, team_id, user_id])
}
